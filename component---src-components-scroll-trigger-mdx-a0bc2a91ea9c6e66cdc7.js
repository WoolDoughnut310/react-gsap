(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{AHRZ:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return p})),t.d(n,"default",(function(){return u}));t("4cIV"),t("NZyX"),t("c0Gx"),t("QNbk"),t("+ytS"),t("WY76");var r=t("r0ML"),i=t("V0Ug"),o=t("sN0p"),c=t("EeHy"),l=t("3yzF"),g=t("Vdl2"),a=t("lRMv");t("xH0s");function s(){return(s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var p={};void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/ScrollTrigger.mdx"}});var d={_frontmatter:p},b=o.a;function u(e){var n,t,u,f=e.components,m=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(i.b)(b,s({},d,m,{components:f,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"scrolltrigger"},"ScrollTrigger"),Object(i.b)("p",null,"The ScrollTrigger component is a small helper for the ScrollTrigger plugin."),Object(i.b)("p",null,"Read the official documentation: ",Object(i.b)("a",s({parentName:"p"},{href:"https://greensock.com/docs/v3/Plugins/ScrollTrigger"}),"https://greensock.com/docs/v3/Plugins/ScrollTrigger")),Object(i.b)("p",null,"It's available since version 3.2.0.\nBefore you also could use the ScrollTrigger plugin by importing/registering and using it in a Tween or Timeline by yourself:"),Object(i.b)("pre",null,Object(i.b)("code",s({parentName:"pre"},{}),"import { Tween } from 'react-gsap';\n\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\ngsap.registerPlugin(ScrollTrigger);\n\n<Tween\n  to={{\n    x: '300px',\n    scrollTrigger: {\n      trigger: '.square',\n      start: '-200px center',\n      end: '200px center',\n      scrub: 0.5,\n      markers: true,\n    },\n  }}\n>\n  <div className=\"square\" style={{ width: '100px', height: '100px', background: '#ccc' }} />\n</Tween>\n")),Object(i.b)("h2",{id:"basic-usage"},"Basic usage"),Object(i.b)("p",null,"With the ScrollTrigger component, it looks like the following. If you don't add a trigger prop, it will use the ref from the Tween target."),Object(i.b)(c.c,{__position:0,__code:"<ScrollTrigger start=\"-200px center\" end=\"200px center\" scrub={0.5} markers>\n  <Tween\n    to={{\n      x: '300px',\n    }}\n  >\n    <div style={{ width: '100px', height: '100px', background: '#ccc' }} />\n  </Tween>\n  <Tween\n    to={{\n      x: '300px',\n    }}\n  >\n    <div style={{ width: '100px', height: '100px', background: '#999' }} />\n  </Tween>\n</ScrollTrigger>",__scope:(n={props:m,DefaultLayout:o.a,Fragment:r.Fragment,Playground:c.c,Props:c.d,Controls:l.a,PlayState:l.b,ScrollTrigger:l.d,Tween:g.c,Timeline:a.b,TargetWithNames:a.a},n.DefaultLayout=o.a,n._frontmatter=p,n),mdxType:"Playground"},Object(i.b)(l.d,{start:"-200px center",end:"200px center",scrub:.5,markers:!0,mdxType:"ScrollTrigger"},Object(i.b)(g.c,{to:{x:"300px"},mdxType:"Tween"},Object(i.b)("div",{style:{width:"100px",height:"100px",background:"#ccc"}})),Object(i.b)(g.c,{to:{x:"300px"},mdxType:"Tween"},Object(i.b)("div",{style:{width:"100px",height:"100px",background:"#999"}})))),Object(i.b)("h2",{id:"use-trigger-prop"},'Use "trigger" prop'),Object(i.b)("p",null,"Currently it's not possible to change the props on the fly. ",Object(i.b)("strong",{parentName:"p"},"So this will not work for the ",Object(i.b)("inlineCode",{parentName:"strong"},"trigger")," prop"),":"),Object(i.b)("pre",null,Object(i.b)("code",s({parentName:"pre"},{}),"const triggerRef = useRef(null);\nconst [trigger, setTrigger] = useState(triggerRef.current);\n\nuseEffect(() => {\n  setTrigger(triggerRef.current);\n}, []);\n\nreturn (\n  <>\n    <ScrollTrigger trigger={trigger}>\n      <Tween\n        to={{\n          x: '500px',\n        }}\n      >\n        <div>This element gets not tweened by ref</div>\n      </Tween>\n    </ScrollTrigger>\n\n    <Square ref={triggerRef}>\n      This element is the trigger\n    </Square>\n  </>\n);\n")),Object(i.b)("p",null,"If you want to target a ref directly instead of using a CSS selector you can use a Timeline with a forwardRef target:"),Object(i.b)("pre",null,Object(i.b)("code",s({parentName:"pre"},{}),"// This is the target component which \"exports\" 4 refs\nconst TargetWithNames = forwardRef((props, ref: any) => {\n  const div1 = useRef(null);\n  const div2 = useRef<MutableRefObject<any>[]>([]);\n  const div3 = useRef(null);\n  const trigger = useRef(null);\n\n  useImperativeHandle(ref, () => ({\n    div1,\n    div2,\n    div3,\n    trigger,\n  }));\n\n  return (\n    <div ref={trigger} style={{ textAlign: 'center' }}>\n      <h3 ref={div1}>THIS</h3>\n      <SplitChars\n        ref={(charRef: MutableRefObject<any>) => div2.current.push(charRef)}\n        wrapper={<h3 style={{ display: 'inline-block' }} />}\n      >\n        TEST\n      </SplitChars>\n      <h3 ref={div3}>IS A</h3>\n    </div>\n  );\n});\n")),Object(i.b)("p",null,"You can then use the key of the exported refs in the ",Object(i.b)("inlineCode",{parentName:"p"},"trigger")," or ",Object(i.b)("inlineCode",{parentName:"p"},"target")," props.\nIf it doesn't find a ref with this key it will use the ",Object(i.b)("inlineCode",{parentName:"p"},"trigger")," string as CSS selector."),Object(i.b)(c.c,{__position:1,__code:'<ScrollTrigger\n  trigger="trigger"\n  start="top center"\n  end="400px center"\n  scrub={0.5}\n  markers={true}\n  pin={true}\n>\n  <Timeline target={<TargetWithNames />}>\n    <Tween\n      from={{\n        x: \'-100vw\',\n      }}\n      target="div1"\n    />\n    <Tween\n      from={{\n        x: \'-100vw\',\n      }}\n      target="div3"\n    />\n    <Tween\n      from={{\n        x: \'-100vw\',\n      }}\n      stagger={0.5}\n      target="div2"\n    />\n  </Timeline>\n</ScrollTrigger>',__scope:(t={props:m,DefaultLayout:o.a,Fragment:r.Fragment,Playground:c.c,Props:c.d,Controls:l.a,PlayState:l.b,ScrollTrigger:l.d,Tween:g.c,Timeline:a.b,TargetWithNames:a.a},t.DefaultLayout=o.a,t._frontmatter=p,t),mdxType:"Playground"},Object(i.b)(l.d,{trigger:"trigger",start:"top center",end:"400px center",scrub:.5,markers:!0,pin:!0,mdxType:"ScrollTrigger"},Object(i.b)(a.b,{target:Object(i.b)(a.a,{mdxType:"TargetWithNames"}),mdxType:"Timeline"},Object(i.b)(g.c,{from:{x:"-100vw"},target:"div1",mdxType:"Tween"}),Object(i.b)(g.c,{from:{x:"-100vw"},target:"div3",mdxType:"Tween"}),Object(i.b)(g.c,{from:{x:"-100vw"},stagger:.5,target:"div2",mdxType:"Tween"})))),Object(i.b)("h2",{id:"standalone"},"Standalone"),Object(i.b)("p",null,"If you don't pass children to the component a GSAP ScrollTrigger instance will be created and can be used standalone."),Object(i.b)("p",null,"You can get the instance by calling ",Object(i.b)("inlineCode",{parentName:"p"},"getGSAP()")," on the ref."),Object(i.b)(c.c,{__position:2,__code:"() => {\n  const scrollTrigger = React.useRef(null)\n  return (\n    <Fragment>\n      <div\n        id=\"id\"\n        style={{ width: '100px', height: '100px', background: '#ccc' }}\n      />\n      <div\n        id=\"otherID\"\n        style={{ width: '100px', height: '100px', background: '#999' }}\n      />\n      <ScrollTrigger\n        ref={scrollTrigger}\n        trigger=\"#id\"\n        start=\"top top\"\n        endTrigger=\"#otherID\"\n        end=\"bottom 50%+=100px\"\n        markers\n        onToggle={self => console.log('toggled, isActive:', self.isActive)}\n        onUpdate={self => {\n          console.log(\n            'progress:',\n            self.progress.toFixed(3),\n            'direction:',\n            self.direction,\n            'velocity',\n            self.getVelocity(),\n          )\n        }}\n      />\n      <button onClick={() => scrollTrigger.current.getGSAP().disable()}>\n        Disable ScrollTrigger\n      </button>\n    </Fragment>\n  )\n}",__scope:(u={props:m,DefaultLayout:o.a,Fragment:r.Fragment,Playground:c.c,Props:c.d,Controls:l.a,PlayState:l.b,ScrollTrigger:l.d,Tween:g.c,Timeline:a.b,TargetWithNames:a.a},u.DefaultLayout=o.a,u._frontmatter=p,u),mdxType:"Playground"},(function(){var e=r.useRef(null);return Object(i.b)(r.Fragment,{mdxType:"Fragment"},Object(i.b)("div",{id:"id",style:{width:"100px",height:"100px",background:"#ccc"}}),Object(i.b)("div",{id:"otherID",style:{width:"100px",height:"100px",background:"#999"}}),Object(i.b)(l.d,{ref:e,trigger:"#id",start:"top top",endTrigger:"#otherID",end:"bottom 50%+=100px",markers:!0,onToggle:function(e){return console.log("toggled, isActive:",e.isActive)},onUpdate:function(e){console.log("progress:",e.progress.toFixed(3),"direction:",e.direction,"velocity",e.getVelocity())},mdxType:"ScrollTrigger"}),Object(i.b)("button",{onClick:function(){return e.current.getGSAP().disable()}},"Disable ScrollTrigger"))})))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/ScrollTrigger.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-scroll-trigger-mdx-a0bc2a91ea9c6e66cdc7.js.map