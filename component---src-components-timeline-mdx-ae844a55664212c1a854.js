(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{WVQm:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return d})),n.d(t,"default",(function(){return g}));n("4cIV"),n("NZyX"),n("c0Gx"),n("QNbk"),n("+ytS"),n("WY76");var a=n("V0Ug"),r=n("sN0p"),o=n("r0ML"),i=n("EeHy"),b=n("3yzF"),l=n("lRMv"),c=n("Vdl2");n("xH0s");function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var d={};void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/Timeline.mdx"}});var m={_frontmatter:d},s=r.a;function g(e){var t,n,g,y,O,T,j=e.components,u=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(s,p({},m,u,{components:j,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"timeline"},"Timeline"),Object(a.b)("p",null,"The Timeline component uses the ",Object(a.b)("a",p({parentName:"p"},{href:"https://greensock.com/docs/v3/GSAP/Timeline"}),"gsap.timeline()")," function internally."),Object(a.b)("pre",null,Object(a.b)("code",p({parentName:"pre"},{}),"import { Controls, PlayState, Timeline, Tween } from 'react-gsap';\n")),Object(a.b)("h2",{id:"basic-usage"},"Basic usage"),Object(a.b)("p",null,'You can add a target and control it with childless Tween components. The target needs to be a "refable" component.\nSo it can be a HTML element or a forwardRef component like a styled-components component.'),Object(a.b)(i.c,{__position:0,__code:"<Controls playState={PlayState.stop}>\n  <Timeline\n    target={\n      <div style={{ width: '100px', height: '100px', background: '#ccc' }} />\n    }\n  >\n    <Tween from={{ opacity: 0 }} to={{ opacity: 1 }} duration={2} />\n    <Tween to={{ x: '200px' }} />\n    <Tween to={{ rotation: 180 }} position=\"+=1\" />\n  </Timeline>\n</Controls>",__scope:(t={props:u,DefaultLayout:r.a,Fragment:o.Fragment,Playground:i.c,Props:i.d,Controls:b.a,PlayState:b.b,Timeline:l.b,TimelinePropsDummy:l.c,TargetWithNames:l.a,Tween:c.c},t.DefaultLayout=r.a,t._frontmatter=d,t),mdxType:"Playground"},Object(a.b)(b.a,{playState:b.b.stop,mdxType:"Controls"},Object(a.b)(l.b,{target:Object(a.b)("div",{style:{width:"100px",height:"100px",background:"#ccc"}}),mdxType:"Timeline"},Object(a.b)(c.c,{from:{opacity:0},to:{opacity:1},duration:2,mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"200px"},mdxType:"Tween"}),Object(a.b)(c.c,{to:{rotation:180},position:"+=1",mdxType:"Tween"})))),Object(a.b)("h2",{id:"other-tweens"},"Other Tweens"),Object(a.b)("p",null,"You can also add other normal Tweens."),Object(a.b)(i.c,{__position:1,__code:"<Controls playState={PlayState.stop}>\n  <Timeline\n    target={\n      <div style={{ width: '100px', height: '100px', background: '#ccc' }} />\n    }\n  >\n    <Tween from={{ opacity: 0 }} to={{ opacity: 1 }} duration={2} />\n    <Tween to={{ x: '200px' }} />\n    <Tween to={{ x: '200px' }} duration={1}>\n      <div style={{ width: '100px', height: '100px', background: 'red' }} />\n    </Tween>\n  </Timeline>\n</Controls>",__scope:(n={props:u,DefaultLayout:r.a,Fragment:o.Fragment,Playground:i.c,Props:i.d,Controls:b.a,PlayState:b.b,Timeline:l.b,TimelinePropsDummy:l.c,TargetWithNames:l.a,Tween:c.c},n.DefaultLayout=r.a,n._frontmatter=d,n),mdxType:"Playground"},Object(a.b)(b.a,{playState:b.b.stop,mdxType:"Controls"},Object(a.b)(l.b,{target:Object(a.b)("div",{style:{width:"100px",height:"100px",background:"#ccc"}}),mdxType:"Timeline"},Object(a.b)(c.c,{from:{opacity:0},to:{opacity:1},duration:2,mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"200px"},mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"200px"},duration:1,mdxType:"Tween"},Object(a.b)("div",{style:{width:"100px",height:"100px",background:"red"}}))))),Object(a.b)("h2",{id:"multiple-targets"},"Multiple targets"),Object(a.b)("p",null,"You can wrap multiple target components in a Fragment and target them with the array index with the ",Object(a.b)("inlineCode",{parentName:"p"},"target")," prop from the Tween component.\nIf you don't add a target you transform all target components."),Object(a.b)(i.c,{__position:2,__code:"<Controls playState={PlayState.stop}>\n  <Timeline\n    target={\n      <Fragment>\n        <div\n          style={{ width: '100px', height: '100px', background: '#ccc' }}\n        />\n        <div style={{ width: '100px', height: '100px', background: 'red' }} />\n      </Fragment>\n    }\n  >\n    <Tween to={{ x: '100px' }} target={0} />\n    <Tween to={{ x: '100px' }} target={1} />\n    <Tween to={{ x: '200px' }} target={0} />\n    <Tween to={{ x: '200px' }} target={1} />\n    <Tween to={{ opacity: 0 }} />\n  </Timeline>\n</Controls>",__scope:(g={props:u,DefaultLayout:r.a,Fragment:o.Fragment,Playground:i.c,Props:i.d,Controls:b.a,PlayState:b.b,Timeline:l.b,TimelinePropsDummy:l.c,TargetWithNames:l.a,Tween:c.c},g.DefaultLayout=r.a,g._frontmatter=d,g),mdxType:"Playground"},Object(a.b)(b.a,{playState:b.b.stop,mdxType:"Controls"},Object(a.b)(l.b,{target:Object(a.b)(o.Fragment,{mdxType:"Fragment"},Object(a.b)("div",{style:{width:"100px",height:"100px",background:"#ccc"}}),Object(a.b)("div",{style:{width:"100px",height:"100px",background:"red"}})),mdxType:"Timeline"},Object(a.b)(c.c,{to:{x:"100px"},target:0,mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"100px"},target:1,mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"200px"},target:0,mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"200px"},target:1,mdxType:"Tween"}),Object(a.b)(c.c,{to:{opacity:0},mdxType:"Tween"})))),Object(a.b)("h2",{id:"advanced-multiple-targets"},"Advanced multiple targets"),Object(a.b)("p",null,"If you need to target individual elements you can use a special forwardRef function.\nThe ",Object(a.b)("inlineCode",{parentName:"p"},"targets")," parameter provide the ",Object(a.b)("inlineCode",{parentName:"p"},"set")," function, which you can use to set a ref to a certain key."),Object(a.b)("p",null,"If you use an array as value, as seen in the example, you can save multiple elements as array under one key and use e.g. the ",Object(a.b)("inlineCode",{parentName:"p"},"stagger")," prop."),Object(a.b)("pre",null,Object(a.b)("code",p({parentName:"pre"},{className:"language-javascript"}),"const TargetWithNames = forwardRef((props, targets) => (\n  <div style={{ textAlign: 'center' }}>\n    <h3 ref={div => targets.set('div1', div)}>THIS</h3>\n    <SplitChars\n      ref={(div: ReactElement) => targets.set('div2', [div])}\n      wrapper={<h3 style={{ display: 'inline-block' }} />}\n    >\n      TEST\n    </SplitChars>\n    <h3 ref={div => targets.set('div3', div)}>IS A</h3>\n  </div>\n));\n\n")),Object(a.b)(i.c,{__position:3,__code:'<Controls playState={PlayState.stop}>\n  <Timeline target={<TargetWithNames />}>\n    <Tween from={{ x: \'-100vw\' }} target="div1" position="0" />\n    <Tween from={{ x: \'-100vw\' }} target="div2" position="2" stagger={0.1} />\n    <Tween from={{ x: \'-100vw\' }} target="div3" position="1" />\n  </Timeline>\n</Controls>',__scope:(y={props:u,DefaultLayout:r.a,Fragment:o.Fragment,Playground:i.c,Props:i.d,Controls:b.a,PlayState:b.b,Timeline:l.b,TimelinePropsDummy:l.c,TargetWithNames:l.a,Tween:c.c},y.DefaultLayout=r.a,y._frontmatter=d,y),mdxType:"Playground"},Object(a.b)(b.a,{playState:b.b.stop,mdxType:"Controls"},Object(a.b)(l.b,{target:Object(a.b)(l.a,{mdxType:"TargetWithNames"}),mdxType:"Timeline"},Object(a.b)(c.c,{from:{x:"-100vw"},target:"div1",position:"0",mdxType:"Tween"}),Object(a.b)(c.c,{from:{x:"-100vw"},target:"div2",position:"2",stagger:.1,mdxType:"Tween"}),Object(a.b)(c.c,{from:{x:"-100vw"},target:"div3",position:"1",mdxType:"Tween"})))),Object(a.b)("h2",{id:"nested-timelines"},"Nested Timelines"),Object(a.b)("p",null,"You can nest other Timelines or HTML structures."),Object(a.b)(i.c,{__position:4,__code:"<Controls playState={PlayState.stop}>\n  <Timeline\n    target={\n      <div style={{ width: '100px', height: '100px', background: '#ccc' }} />\n    }\n  >\n    <Tween from={{ scaleX: 0.5, scaleY: 0.5 }} duration={2} />\n    <Tween to={{ x: '200px' }} />\n    <div>\n      <p>Other Timeline:</p>\n      <Timeline\n        target={\n          <div\n            style={{ width: '100px', height: '100px', background: 'red' }}\n          />\n        }\n      >\n        <Tween from={{ scaleX: 0.5, scaleY: 0.5 }} duration={2} />\n        <Tween to={{ x: '200px' }} />\n      </Timeline>\n    </div>\n  </Timeline>\n</Controls>",__scope:(O={props:u,DefaultLayout:r.a,Fragment:o.Fragment,Playground:i.c,Props:i.d,Controls:b.a,PlayState:b.b,Timeline:l.b,TimelinePropsDummy:l.c,TargetWithNames:l.a,Tween:c.c},O.DefaultLayout=r.a,O._frontmatter=d,O),mdxType:"Playground"},Object(a.b)(b.a,{playState:b.b.stop,mdxType:"Controls"},Object(a.b)(l.b,{target:Object(a.b)("div",{style:{width:"100px",height:"100px",background:"#ccc"}}),mdxType:"Timeline"},Object(a.b)(c.c,{from:{scaleX:.5,scaleY:.5},duration:2,mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"200px"},mdxType:"Tween"}),Object(a.b)("div",null,Object(a.b)("p",null,"Other Timeline:"),Object(a.b)(l.b,{target:Object(a.b)("div",{style:{width:"100px",height:"100px",background:"red"}}),mdxType:"Timeline"},Object(a.b)(c.c,{from:{scaleX:.5,scaleY:.5},duration:2,mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"200px"},mdxType:"Tween"})))))),Object(a.b)("h2",{id:"label-support"},"Label support"),Object(a.b)("p",null,"You can add labels to the timeline and use them in the position prop of the Tweens or nested Timelines."),Object(a.b)("p",null,"More info: ",Object(a.b)("a",p({parentName:"p"},{href:"https://greensock.com/docs/v3/GSAP/Timeline/addLabel()"}),"https://greensock.com/docs/v3/GSAP/Timeline/addLabel()")),Object(a.b)(i.c,{__position:5,__code:"<Controls playState={PlayState.stop}>\n  <Timeline\n    target={\n      <div style={{ width: '100px', height: '100px', background: '#ccc' }} />\n    }\n    labels={[\n      {\n        label: 'sec4',\n        position: 4,\n      },\n      {\n        label: 'sec6',\n        position: 6,\n      },\n    ]}\n  >\n    <Tween from={{ opacity: 0 }} to={{ opacity: 1 }} duration={2} />\n    <Tween to={{ x: '200px' }} />\n    <Tween to={{ rotation: 180 }} position=\"sec4\" />\n    <Tween to={{ x: '0px' }} position=\"sec6\" />\n  </Timeline>\n</Controls>",__scope:(T={props:u,DefaultLayout:r.a,Fragment:o.Fragment,Playground:i.c,Props:i.d,Controls:b.a,PlayState:b.b,Timeline:l.b,TimelinePropsDummy:l.c,TargetWithNames:l.a,Tween:c.c},T.DefaultLayout=r.a,T._frontmatter=d,T),mdxType:"Playground"},Object(a.b)(b.a,{playState:b.b.stop,mdxType:"Controls"},Object(a.b)(l.b,{target:Object(a.b)("div",{style:{width:"100px",height:"100px",background:"#ccc"}}),labels:[{label:"sec4",position:4},{label:"sec6",position:6}],mdxType:"Timeline"},Object(a.b)(c.c,{from:{opacity:0},to:{opacity:1},duration:2,mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"200px"},mdxType:"Tween"}),Object(a.b)(c.c,{to:{rotation:180},position:"sec4",mdxType:"Tween"}),Object(a.b)(c.c,{to:{x:"0px"},position:"sec6",mdxType:"Tween"})))),Object(a.b)("h2",{id:"props"},"Props"),Object(a.b)("p",null,"The question mark means it's an optional prop."),Object(a.b)("p",null,"For all available props check out the documentation: ",Object(a.b)("a",p({parentName:"p"},{href:"https://greensock.com/docs/v3/GSAP/Timeline/vars"}),"vars")),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",p({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",p({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",p({parentName:"tr"},{align:"left"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"children"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"React.ReactNode"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"Can be any component type. But Tween and other Timeline components are controlled by this Timeline")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"wrapper?"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"React.ReactElement"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"This component gets wrapped around the Timeline component")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"target?"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"React.ReactElement ","|"," null"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"The target component that gets outputted and tweened from all childless Tween child components")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"position?"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"string ","|"," number"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"If this Timeline is a child from another Timeline it's added at this position")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"labels?"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"Label[]"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"Can be used to give the positions a name")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"duration?"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"number"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"Adjusts the Timeline's timeScale to fit it within the specified duration (Can be changed on-the-fly)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"progress?"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"number"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"0 - 1 (Can be changed on-the-fly)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"totalProgress?"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"number"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"0 - 1 (Can be changed on-the-fly)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"playState?"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"PlayState"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"Use it to control the playing state (Can be changed on-the-fly)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"[prop: string]"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"any"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"All other props are added to the vars object for the gsap.timeline function")))),Object(a.b)("h2",{id:"type-label"},"Type Label"),Object(a.b)("p",null,"More info: ",Object(a.b)("a",p({parentName:"p"},{href:"https://greensock.com/docs/v3/GSAP/Timeline/addLabel()"}),"https://greensock.com/docs/v3/GSAP/Timeline/addLabel()")),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",p({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",p({parentName:"tr"},{align:"left"}),"Type"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"label"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"string")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"position"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"string ","|"," number")))),Object(a.b)("h2",{id:"enum-playstate"},"Enum PlayState"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",p({parentName:"tr"},{align:"left"}),"Field"),Object(a.b)("th",p({parentName:"tr"},{align:"left"}),"As string"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"play"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),'"play"')),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"reverse"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),'"reverse"')),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"stop"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),'"stop"')),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",p({parentName:"tr"},{align:"left"}),"pause"),Object(a.b)("td",p({parentName:"tr"},{align:"left"}),'"pause"')))))}void 0!==g&&g&&g===Object(g)&&Object.isExtensible(g)&&!g.hasOwnProperty("__filemeta")&&Object.defineProperty(g,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/Timeline.mdx"}}),g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-timeline-mdx-ae844a55664212c1a854.js.map