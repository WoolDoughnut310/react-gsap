{"version":3,"sources":["webpack:///../src/components/ScrollTrigger.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Fragment","Playground","Props","Controls","PlayState","ScrollTrigger","Tween","Timeline","TargetWithNames","start","end","scrub","markers","to","x","style","width","height","background","trigger","pin","target","from","stagger","scrollTrigger","React","id","ref","endTrigger","onToggle","self","console","log","isActive","onUpdate","progress","toFixed","direction","getVelocity","onClick","current","getGSAP","disable","isMDXComponent"],"mappings":"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","file":"component---src-components-scroll-trigger-mdx-a0bc2a91ea9c6e66cdc7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Projekte/Experimente/github/react-gsap/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Fragment } from 'react';\nimport { Playground, Props } from 'docz';\nimport { Controls, PlayState, ScrollTrigger } from './../../../react-gsap/src/';\nimport { Tween } from './Tween';\nimport { Timeline, TargetWithNames } from './Timeline';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"scrolltrigger\"\n    }}>{`ScrollTrigger`}</h1>\n    <p>{`The ScrollTrigger component is a small helper for the ScrollTrigger plugin.`}</p>\n    <p>{`Read the official documentation: `}<a parentName=\"p\" {...{\n        \"href\": \"https://greensock.com/docs/v3/Plugins/ScrollTrigger\"\n      }}>{`https://greensock.com/docs/v3/Plugins/ScrollTrigger`}</a></p>\n    <p>{`It's available since version 3.2.0.\nBefore you also could use the ScrollTrigger plugin by importing/registering and using it in a Tween or Timeline by yourself:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import { Tween } from 'react-gsap';\n\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\ngsap.registerPlugin(ScrollTrigger);\n\n<Tween\n  to={{\n    x: '300px',\n    scrollTrigger: {\n      trigger: '.square',\n      start: '-200px center',\n      end: '200px center',\n      scrub: 0.5,\n      markers: true,\n    },\n  }}\n>\n  <div className=\"square\" style={{ width: '100px', height: '100px', background: '#ccc' }} />\n</Tween>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <p>{`With the ScrollTrigger component, it looks like the following. If you don't add a trigger prop, it will use the ref from the Tween target.`}</p>\n    <Playground __position={0} __code={'<ScrollTrigger start=\\\"-200px center\\\" end=\\\"200px center\\\" scrub={0.5} markers>\\n  <Tween\\n    to={{\\n      x: \\'300px\\',\\n    }}\\n  >\\n    <div style={{ width: \\'100px\\', height: \\'100px\\', background: \\'#ccc\\' }} />\\n  </Tween>\\n  <Tween\\n    to={{\\n      x: \\'300px\\',\\n    }}\\n  >\\n    <div style={{ width: \\'100px\\', height: \\'100px\\', background: \\'#999\\' }} />\\n  </Tween>\\n</ScrollTrigger>'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Playground,\n      Props,\n      Controls,\n      PlayState,\n      ScrollTrigger,\n      Tween,\n      Timeline,\n      TargetWithNames,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ScrollTrigger start=\"-200px center\" end=\"200px center\" scrub={0.5} markers mdxType=\"ScrollTrigger\">\n    <Tween to={{\n          x: '300px'\n        }} mdxType=\"Tween\">\n      <div style={{\n            width: '100px',\n            height: '100px',\n            background: '#ccc'\n          }} />\n    </Tween>\n    <Tween to={{\n          x: '300px'\n        }} mdxType=\"Tween\">\n      <div style={{\n            width: '100px',\n            height: '100px',\n            background: '#999'\n          }} />\n    </Tween>\n  </ScrollTrigger>\n    </Playground>\n    <h2 {...{\n      \"id\": \"use-trigger-prop\"\n    }}>{`Use \"trigger\" prop`}</h2>\n    <p>{`Currently it's not possible to change the props on the fly. `}<strong parentName=\"p\">{`So this will not work for the `}<inlineCode parentName=\"strong\">{`trigger`}</inlineCode>{` prop`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const triggerRef = useRef(null);\nconst [trigger, setTrigger] = useState(triggerRef.current);\n\nuseEffect(() => {\n  setTrigger(triggerRef.current);\n}, []);\n\nreturn (\n  <>\n    <ScrollTrigger trigger={trigger}>\n      <Tween\n        to={{\n          x: '500px',\n        }}\n      >\n        <div>This element gets not tweened by ref</div>\n      </Tween>\n    </ScrollTrigger>\n\n    <Square ref={triggerRef}>\n      This element is the trigger\n    </Square>\n  </>\n);\n`}</code></pre>\n    <p>{`If you want to target a ref directly instead of using a CSS selector you can use a Timeline with a forwardRef target:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// This is the target component which \"exports\" 4 refs\nconst TargetWithNames = forwardRef((props, ref: any) => {\n  const div1 = useRef(null);\n  const div2 = useRef<MutableRefObject<any>[]>([]);\n  const div3 = useRef(null);\n  const trigger = useRef(null);\n\n  useImperativeHandle(ref, () => ({\n    div1,\n    div2,\n    div3,\n    trigger,\n  }));\n\n  return (\n    <div ref={trigger} style={{ textAlign: 'center' }}>\n      <h3 ref={div1}>THIS</h3>\n      <SplitChars\n        ref={(charRef: MutableRefObject<any>) => div2.current.push(charRef)}\n        wrapper={<h3 style={{ display: 'inline-block' }} />}\n      >\n        TEST\n      </SplitChars>\n      <h3 ref={div3}>IS A</h3>\n    </div>\n  );\n});\n`}</code></pre>\n    <p>{`You can then use the key of the exported refs in the `}<inlineCode parentName=\"p\">{`trigger`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` props.\nIf it doesn't find a ref with this key it will use the `}<inlineCode parentName=\"p\">{`trigger`}</inlineCode>{` string as CSS selector.`}</p>\n    <Playground __position={1} __code={'<ScrollTrigger\\n  trigger=\\\"trigger\\\"\\n  start=\\\"top center\\\"\\n  end=\\\"400px center\\\"\\n  scrub={0.5}\\n  markers={true}\\n  pin={true}\\n>\\n  <Timeline target={<TargetWithNames />}>\\n    <Tween\\n      from={{\\n        x: \\'-100vw\\',\\n      }}\\n      target=\\\"div1\\\"\\n    />\\n    <Tween\\n      from={{\\n        x: \\'-100vw\\',\\n      }}\\n      target=\\\"div3\\\"\\n    />\\n    <Tween\\n      from={{\\n        x: \\'-100vw\\',\\n      }}\\n      stagger={0.5}\\n      target=\\\"div2\\\"\\n    />\\n  </Timeline>\\n</ScrollTrigger>'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Playground,\n      Props,\n      Controls,\n      PlayState,\n      ScrollTrigger,\n      Tween,\n      Timeline,\n      TargetWithNames,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ScrollTrigger trigger=\"trigger\" start=\"top center\" end=\"400px center\" scrub={0.5} markers={true} pin={true} mdxType=\"ScrollTrigger\">\n    <Timeline target={<TargetWithNames mdxType=\"TargetWithNames\" />} mdxType=\"Timeline\">\n      <Tween from={{\n            x: '-100vw'\n          }} target=\"div1\" mdxType=\"Tween\" />\n      <Tween from={{\n            x: '-100vw'\n          }} target=\"div3\" mdxType=\"Tween\" />\n      <Tween from={{\n            x: '-100vw'\n          }} stagger={0.5} target=\"div2\" mdxType=\"Tween\" />\n    </Timeline>\n  </ScrollTrigger>\n    </Playground>\n    <h2 {...{\n      \"id\": \"standalone\"\n    }}>{`Standalone`}</h2>\n    <p>{`If you don't pass children to the component a GSAP ScrollTrigger instance will be created and can be used standalone.`}</p>\n    <p>{`You can get the instance by calling `}<inlineCode parentName=\"p\">{`getGSAP()`}</inlineCode>{` on the ref.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const scrollTrigger = React.useRef(null)\\n  return (\\n    <Fragment>\\n      <div\\n        id=\\\"id\\\"\\n        style={{ width: \\'100px\\', height: \\'100px\\', background: \\'#ccc\\' }}\\n      />\\n      <div\\n        id=\\\"otherID\\\"\\n        style={{ width: \\'100px\\', height: \\'100px\\', background: \\'#999\\' }}\\n      />\\n      <ScrollTrigger\\n        ref={scrollTrigger}\\n        trigger=\\\"#id\\\"\\n        start=\\\"top top\\\"\\n        endTrigger=\\\"#otherID\\\"\\n        end=\\\"bottom 50%+=100px\\\"\\n        markers\\n        onToggle={self => console.log(\\'toggled, isActive:\\', self.isActive)}\\n        onUpdate={self => {\\n          console.log(\\n            \\'progress:\\',\\n            self.progress.toFixed(3),\\n            \\'direction:\\',\\n            self.direction,\\n            \\'velocity\\',\\n            self.getVelocity(),\\n          )\\n        }}\\n      />\\n      <button onClick={() => scrollTrigger.current.getGSAP().disable()}>\\n        Disable ScrollTrigger\\n      </button>\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Playground,\n      Props,\n      Controls,\n      PlayState,\n      ScrollTrigger,\n      Tween,\n      Timeline,\n      TargetWithNames,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const scrollTrigger = React.useRef(null);\n        return <Fragment mdxType=\"Fragment\">\n        <div id=\"id\" style={{\n            width: '100px',\n            height: '100px',\n            background: '#ccc'\n          }} />\n        <div id=\"otherID\" style={{\n            width: '100px',\n            height: '100px',\n            background: '#999'\n          }} />\n        <ScrollTrigger ref={scrollTrigger} trigger=\"#id\" start=\"top top\" endTrigger=\"#otherID\" end=\"bottom 50%+=100px\" markers onToggle={self => console.log(\"toggled, isActive:\", self.isActive)} onUpdate={self => {\n            console.log(\"progress:\", self.progress.toFixed(3), \"direction:\", self.direction, \"velocity\", self.getVelocity());\n          }} mdxType=\"ScrollTrigger\" />\n        <button onClick={() => scrollTrigger.current.getGSAP().disable()}>Disable ScrollTrigger</button>\n      </Fragment>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}