{"version":3,"sources":["webpack:///../src/instructions/PlayState.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Fragment","Playground","PlayState","Tween","React","pause","playState","setPlayState","totalProgress","setTotalProgress","to","x","duration","style","width","height","background","onClick","play","restart","reverse","restartReverse","stop","stopEnd","resume","type","max","step","value","onChange","event","target","isMDXComponent"],"mappings":"6gBASO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,yCADR,yCAGA,yMAEA,kDAAiC,0BAAYC,WAAW,KAAvB,aAAjC,gFACF,0BAAYA,WAAW,KAAvB,kBADE,KAC8D,0BAAYA,WAAW,KAAvB,WAD9D,KACuH,0BAAYA,WAAW,KAAvB,UADvH,KAEA,mFAAkE,0BAAYA,WAAW,KAAvB,aAAlE,iBACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,+hBAmBL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,2zCAAo0CC,SAAO,GAC52CL,QACAH,kBACAS,oBACAC,eACAC,cACAC,WAN42C,gBAO52CZ,IAP42C,EAQ52CH,eAR42C,GAS32CO,QAAQ,eACZ,WAAM,MACiCS,WAAeF,IAAUG,OAApDC,EADN,KACiBC,EADjB,OAEyCH,WAAe,GAAlDI,EAFN,KAEqBC,EAFrB,KAGD,OAAO,YAAC,WAAD,CAAUd,QAAQ,YACzB,YAAC,IAAD,CAAOe,GAAI,CACPC,EAAG,SACFC,SAAU,EAAGN,UAAWA,EAAWE,cAAeA,EAAeb,QAAQ,SAC5E,mBAAKkB,MAAO,CACRC,MAAO,QACPC,OAAQ,QACRC,WAAY,WAGlB,sBAAQC,QAAS,kBAAMV,EAAaL,IAAUgB,QAA9C,QACA,sBAAQD,QAAS,kBAAMV,EAAaL,IAAUiB,WAA9C,WACA,sBAAQF,QAAS,kBAAMV,EAAaL,IAAUkB,WAA9C,WACA,sBAAQH,QAAS,kBAAMV,EAAaL,IAAUmB,kBAA9C,kBACA,sBAAQJ,QAAS,kBAAMV,EAAaL,IAAUoB,QAA9C,QACA,sBAAQL,QAAS,kBAAMV,EAAaL,IAAUqB,WAA9C,WACA,sBAAQN,QAAS,kBAAMV,EAAaL,IAAUG,SAA9C,SACA,sBAAQY,QAAS,kBAAMV,EAAaL,IAAUsB,UAA9C,UACA,uBACE,qBAAOC,KAAK,QAAQC,IAAI,IAAIC,KAAK,QAAQC,MAAOpB,EAAeqB,SAAU,SAAAC,GAAK,OAAIrB,EAAiBqB,EAAMC,OAAOH,qB,8MAS1HpC,EAAWwC,gBAAiB","file":"component---src-instructions-play-state-mdx-d9d25acf2aed7979f140.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Projekte/Experimente/github/react-gsap/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Fragment } from 'react';\nimport { Playground } from 'docz';\nimport { PlayState, Tween } from './../../../react-gsap/src/';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"use-playstate-and-totalprogress-props\"\n    }}>{`Use playState and totalProgress props`}</h1>\n    <p>{`With the playState and progress/totalProgress props you can control a Tween or a Timeline.\nSo you don't need low-level access to play/reverse/pause/stop or seek to a position.`}</p>\n    <p>{`From version 3.2.0 on the `}<inlineCode parentName=\"p\">{`playState`}</inlineCode>{` prop also works for the initial state and the following states were added:\n`}<inlineCode parentName=\"p\">{`restartReverse`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`stopEnd`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`resume`}</inlineCode>{`.`}</p>\n    <p>{`The following gsap functions are called internally, if the `}<inlineCode parentName=\"p\">{`playState`}</inlineCode>{` prop change:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`if (playState === PlayState.play) {\n  gsap.play();\n} else if (playState === PlayState.restart) {\n  gsap.restart(true);\n} else if (playState === PlayState.reverse) {\n  gsap.reverse();\n} else if (playState === PlayState.restartReverse) {\n  gsap.reverse(0);\n} else if (playState === PlayState.stop) {\n  gsap.pause(0);\n} else if (playState === PlayState.stopEnd) {\n  gsap.reverse(0);\n  gsap.pause();\n} else if (playState === PlayState.pause) {\n  gsap.pause();\n} else if (playState === PlayState.resume) {\n  gsap.resume();\n}\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [playState, setPlayState] = React.useState(PlayState.pause)\\n  const [totalProgress, setTotalProgress] = React.useState(0)\\n  return (\\n    <Fragment>\\n      <Tween\\n        to={{ x: \\'300px\\' }}\\n        duration={2}\\n        playState={playState}\\n        totalProgress={totalProgress}\\n      >\\n        <div\\n          style={{ width: \\'100px\\', height: \\'100px\\', background: \\'#ccc\\' }}\\n        />\\n      </Tween>\\n      <button onClick={() => setPlayState(PlayState.play)}>play</button>\\n      <button onClick={() => setPlayState(PlayState.restart)}>restart</button>\\n      <button onClick={() => setPlayState(PlayState.reverse)}>reverse</button>\\n      <button onClick={() => setPlayState(PlayState.restartReverse)}>\\n        restartReverse\\n      </button>\\n      <button onClick={() => setPlayState(PlayState.stop)}>stop</button>\\n      <button onClick={() => setPlayState(PlayState.stopEnd)}>stopEnd</button>\\n      <button onClick={() => setPlayState(PlayState.pause)}>pause</button>\\n      <button onClick={() => setPlayState(PlayState.resume)}>resume</button>\\n      <div>\\n        <input\\n          type=\\\"range\\\"\\n          max=\\\"1\\\"\\n          step=\\\"0.001\\\"\\n          value={totalProgress}\\n          onChange={event => setTotalProgress(event.target.value)}\\n        />\\n      </div>\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Playground,\n      PlayState,\n      Tween,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [playState, setPlayState] = React.useState(PlayState.pause);\n        const [totalProgress, setTotalProgress] = React.useState(0);\n        return <Fragment mdxType=\"Fragment\">\n        <Tween to={{\n            x: '300px'\n          }} duration={2} playState={playState} totalProgress={totalProgress} mdxType=\"Tween\">\n          <div style={{\n              width: '100px',\n              height: '100px',\n              background: '#ccc'\n            }} />\n        </Tween>\n        <button onClick={() => setPlayState(PlayState.play)}>play</button>\n        <button onClick={() => setPlayState(PlayState.restart)}>restart</button>\n        <button onClick={() => setPlayState(PlayState.reverse)}>reverse</button>\n        <button onClick={() => setPlayState(PlayState.restartReverse)}>restartReverse</button>\n        <button onClick={() => setPlayState(PlayState.stop)}>stop</button>\n        <button onClick={() => setPlayState(PlayState.stopEnd)}>stopEnd</button>\n        <button onClick={() => setPlayState(PlayState.pause)}>pause</button>\n        <button onClick={() => setPlayState(PlayState.resume)}>resume</button>\n        <div>\n          <input type=\"range\" max=\"1\" step=\"0.001\" value={totalProgress} onChange={event => setTotalProgress(event.target.value)} />\n        </div>\n      </Fragment>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}