{"version":3,"sources":["webpack:///../src/components/SplitWords.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Fragment","Playground","Props","Controls","PlayState","SplitWords","Tween","Timeline","playState","stop","from","x","stagger","ease","wrapper","style","display","fontSize","target","to","y","position","duration","isMDXComponent"],"mappings":"oiBAWO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,mIACA,uBAAK,sBAAMC,WAAW,OAAU,IAA3B,qFAEL,iBAAQ,CACN,GAAM,oBADR,oBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,kTAAyTC,SAAO,GACjWL,QACAH,kBACAS,oBACAC,eACAC,UACAC,aACAC,cACAC,eACAC,UACAC,cAViW,gBAWjWhB,IAXiW,EAYjWH,eAZiW,GAahWO,QAAQ,cACb,YAAC,IAAD,CAAUa,UAAWJ,IAAUK,KAAMd,QAAQ,YAC3C,YAAC,IAAD,CAAOe,KAAM,CACPC,EAAG,SACFC,QAAS,GAAKC,KAAK,wBAAwBlB,QAAQ,SACxD,YAAC,IAAD,CAAYmB,QAAS,mBAAKC,MAAO,CAC3BC,QAAS,eACTC,SAAU,UACLtB,QAAQ,cAHnB,wCASF,iBAAQ,CACN,GAAM,uBADR,uBAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,6kBAAwlBC,SAAO,GAChoBL,QACAH,kBACAS,oBACAC,eACAC,UACAC,aACAC,cACAC,eACAC,UACAC,cAVgoB,gBAWhoBhB,IAXgoB,EAYhoBH,eAZgoB,GAa/nBO,QAAQ,cACb,YAAC,IAAD,CAAUa,UAAWJ,IAAUK,KAAMd,QAAQ,YAC3C,YAAC,IAAD,CAAUuB,OAAQ,YAAC,WAAD,CAAUvB,QAAQ,YAChC,YAAC,IAAD,CAAYmB,QAAS,mBAAKC,MAAO,CAC7BC,QAAS,eACTC,SAAU,UACLtB,QAAQ,cAHjB,sCAMWA,QAAQ,YACrB,YAAC,IAAD,CAAOwB,GAAI,CACLC,EAAG,SACFC,SAAU,GAAKC,SAAU,GAAKJ,OAAQ,EAAGvB,QAAQ,UACxD,YAAC,IAAD,CAAOwB,GAAI,CACLC,EAAG,SACFC,SAAS,QAAQC,SAAU,GAAKJ,OAAQ,EAAGvB,QAAQ,UAC1D,YAAC,IAAD,CAAOwB,GAAI,CACLC,EAAG,SACFC,SAAS,QAAQC,SAAU,GAAKJ,OAAQ,EAAGvB,QAAQ,mB,6MAQhEH,EAAW+B,gBAAiB","file":"component---src-components-split-words-mdx-6a215c8d0b62bdebdf4d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Projekte/Experimente/github/react-gsap/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Fragment } from 'react';\nimport { Playground, Props } from 'docz';\nimport { Controls, PlayState, SplitWords } from './../../../react-gsap/src/';\nimport { Tween } from './Tween';\nimport { Timeline } from './Timeline';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"splitwords\"\n    }}>{`SplitWords`}</h1>\n    <p>{`The SplitWords component is a small helper that splits a text by words and returns one component per word.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import { Controls, PlayState, Timeline, Tween, SplitWords } from 'react-gsap';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage-with-tween\"\n    }}>{`Usage with Tween`}</h2>\n    <Playground __position={0} __code={'<Controls playState={PlayState.stop}>\\n  <Tween from={{ x: \\'200px\\' }} stagger={0.5} ease=\\\"elastic.out(0.1, 0.1)\\\">\\n    <SplitWords\\n      wrapper={<div style={{ display: \\'inline-block\\', fontSize: \\'40px\\' }} />}\\n    >\\n      This text gets splitted by words.\\n    </SplitWords>\\n  </Tween>\\n</Controls>'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Playground,\n      Props,\n      Controls,\n      PlayState,\n      SplitWords,\n      Tween,\n      Timeline,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Controls playState={PlayState.stop} mdxType=\"Controls\">\n    <Tween from={{\n          x: '200px'\n        }} stagger={0.5} ease=\"elastic.out(0.1, 0.1)\" mdxType=\"Tween\">\n      <SplitWords wrapper={<div style={{\n            display: 'inline-block',\n            fontSize: '40px'\n          }} />} mdxType=\"SplitWords\">\n        This text gets splitted by words.\n      </SplitWords>\n    </Tween>\n  </Controls>\n    </Playground>\n    <h2 {...{\n      \"id\": \"usage-with-timeline\"\n    }}>{`Usage with Timeline`}</h2>\n    <Playground __position={1} __code={'<Controls playState={PlayState.stop}>\\n  <Timeline\\n    target={\\n      <Fragment>\\n        <SplitWords\\n          wrapper={\\n            <div style={{ display: \\'inline-block\\', fontSize: \\'40px\\' }} />\\n          }\\n        >\\n          This text gets splitted by words.\\n        </SplitWords>\\n      </Fragment>\\n    }\\n  >\\n    <Tween to={{ y: \\'-20px\\' }} position={0.5} duration={0.1} target={1} />\\n    <Tween to={{ y: \\'-20px\\' }} position=\\\"+=0.5\\\" duration={0.1} target={3} />\\n    <Tween to={{ y: \\'-20px\\' }} position=\\\"+=0.5\\\" duration={0.1} target={5} />\\n  </Timeline>\\n</Controls>'} __scope={{\n      props,\n      DefaultLayout,\n      Fragment,\n      Playground,\n      Props,\n      Controls,\n      PlayState,\n      SplitWords,\n      Tween,\n      Timeline,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Controls playState={PlayState.stop} mdxType=\"Controls\">\n    <Timeline target={<Fragment mdxType=\"Fragment\">\n        <SplitWords wrapper={<div style={{\n            display: 'inline-block',\n            fontSize: '40px'\n          }} />} mdxType=\"SplitWords\">\n          This text gets splitted by words.\n        </SplitWords>\n      </Fragment>} mdxType=\"Timeline\">\n      <Tween to={{\n            y: '-20px'\n          }} position={0.5} duration={0.1} target={1} mdxType=\"Tween\" />\n      <Tween to={{\n            y: '-20px'\n          }} position=\"+=0.5\" duration={0.1} target={3} mdxType=\"Tween\" />\n      <Tween to={{\n            y: '-20px'\n          }} position=\"+=0.5\" duration={0.1} target={5} mdxType=\"Tween\" />\n    </Timeline>\n  </Controls>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}